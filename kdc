#!/bin/bash
#
# Docker Containerized Kerberos KDC.
#
# This should be a pretty good start for building your own docker container
# of a KDC.
# Due to the fact that OSX docker is running in a VM, things get a bit
# complicated.
#
# Latest version is located at: https://github.com/tillt/docker-kdc
#

# Kerberos principal.
PRINCIPAL=${PRINCIPAL:-'tillt'}
# Kerberos principal password.
PASSWORD=${PASSWORD:-'matilda'}
# KDC hostname.
HOST_NAME=${HOST_NAME:='kdc'}
# External KDC IP.
NATHOST=${NATHOST:-'127.0.0.1'}
# External KDC port.
KDC_PORT=${KDC_PORT:='48088'}
# Kerberos domain name.
DOMAIN_NAME=${DOMAIN_NAME:='example.com'}
# Kerberos realm name.
REALM_NAME=${REALM_NAME:-'EXAMPLE.COM'}

DOCKERIMAGE='tillt/docker-kdc:latest'
CONTAINER='docker'
CONTROL_VM='VBoxManage controlvm boot2docker-vm'
GET_KDC_HOST="echo $NATHOST"


# Adjust container in case of OSX.
if [[ $OSTYPE =~ darwin.+ ]]; then
	CONTAINER='boot2docker'
	GET_KDC_HOST="boot2docker ip"
fi


# Start boot2docker if not running and create port forwarding rules for OSX.
function prepareDocker {
	if [[ $CONTAINER == "boot2docker" ]]; then
		boot2docker status &> /dev/null || boot2docker init
		if [[ `boot2docker status` == "poweroff" ]]; then
			boot2docker up
			eval "$(boot2docker shellinit)"
			setupPortForward
		fi
	fi
}


# Port forwarding setup for OSX.
function setupPortForward {
	$CONTROL_VM natpf1 delete "$KDC_PORT/tcp" &> /dev/null
	$CONTROL_VM natpf1 delete "$KDC_PORT/udp" &> /dev/null
	$CONTROL_VM natpf1 "$KDC_PORT/tcp,tcp,$NATHOST,$KDC_PORT,,$KDC_PORT"
	$CONTROL_VM natpf1 "$KDC_PORT/udp,udp,$NATHOST,$KDC_PORT,,$KDC_PORT"
}


# Port forwarding teardown for OSX.
function deletePortForward {
	$CONTROL_VM natpf1 delete "$KDC_PORT/tcp" &> /dev/null
	$CONTROL_VM natpf1 delete "$KDC_PORT/udp" &> /dev/null
}


# Start docker container and render a temporary KDC configuration file.
function startDocker {
	echo "Kerberos KDC container starting..."
	docker run -d -h $HOST_NAME					\
		-p $KDC_PORT:88	 					\
		-p $KDC_PORT:88/udp 					\
		--name=$HOST_NAME 					\
		$DOCKERIMAGE

	KDC_HOST=`$GET_KDC_HOST`
	echo ""
	echo "Kerberos KDC now reachable at '$KDC_HOST:$KDC_PORT'"
	echo ""

	sed -e "s/HOST_NAME/$KDC_HOST:$KDC_PORT/g"			\
		-e "s/DOMAIN_NAME/$DOMAIN_NAME/g" 			\
		-e "s/REALM_NAME/$REALM_NAME/g"				\
		templates/krb5.conf > krb5.conf

	echo "For using the KDC, make sure you use the following environment:"
	echo "    export KRB5_CONFIG=$(pwd)/krb5.conf"
	echo ""
}


# Stop docker container and remove the temporary KDC configuration file.
function stopDocker {
	docker stop $HOST_NAME &> /dev/null
	docker rm $HOST_NAME &> /dev/null
	if [[ $CONTAINER == "boot2docker" ]]; then
		deletePortForward
		[[ `boot2docker status` == "running" ]] && boot2docker down
	fi
	rm -f krb5.conf
	echo "Kerberos KDC stopped and removed"
}


# Render docker container image.
function buildImage {
	sed -e "s/HOST_NAME/$HOST_NAME/g" 				\
		-e "s/DOMAIN_NAME/$DOMAIN_NAME/g" 			\
		-e "s/REALM_NAME/$REALM_NAME/g"	 			\
		-e "s/PRINCIPAL/$PRINCIPAL/g"		 		\
		-e "s/PASSWORD/$PASSWORD/g"		 		\
		-e "s/FRAMEWORK_PASSWORD/$FRAMEWORK_PASSWORD/g"		\
		templates/Dockerfile > Dockerfile
	sed -e "s/HOST_NAME/$HOST_NAME/g" 				\
		-e "s/DOMAIN_NAME/$DOMAIN_NAME/g" 			\
		-e "s/REALM_NAME/$REALM_NAME/g"				\
		templates/krb5.conf > krb5.conf
	docker build -t $DOCKERIMAGE .
	rm -f Dockerfile
	rm -f krb5.conf
}


case "$1" in
	start)
		prepareDocker
		startDocker
		;;
	stop)
		prepareDocker
		stopDocker
		;;
	clean)
		prepareDocker
		docker rmi -f $DOCKERIMAGE
		;;
	build)
		prepareDocker
		buildImage
		;;
	shellinit)
		if [[ $CONTAINER == "boot2docker" ]]; then
			boot2docker shellinit
		fi
		echo "    export KRB5_CONFIG=$(pwd)/krb5.conf"
		;;
	*)
		echo "Usage: $0 start|stop|build|clean|shellinit"
		;;
esac
