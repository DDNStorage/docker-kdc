#!/bin/bash
#
# Lustre-specific Docker container for a Heimdal Kerberos 5 KDC
#
# This should be a pretty good start for building your own docker container
# of a Lustre-specific KDC.
#
# Latest version is located at:
# https://github.com/DDNStorage/lustre-docker-kdc/tree/for_lustre
#

# KDC hostname.
KDC_HOST_NAME=${KDC_HOST_NAME:-'kdc'}
# Config file.
KDC_CONFIG=${KDC_CONFIG:-'kdc.json'}
# Templates source dir.
KDC_TEMPLATES_DIR=${KDC_TEMPLATES_DIR:-'templates'}

# Default principal.
KDC_PRINCIPAL=${KDC_PRINCIPAL:-'lustre_root'}
# Default password.
KDC_PASSWORD=${KDC_PASSWORD:-'dumb'}
# Host requesting authentication.
# Kerberos domain name.
# Default derived from fully qualified domain-name of the host.
# Using backtick operator to prevent sublime's highlighting from freaking out.
DEFAULT=`hostname -f | 							\
	awk -F. '{$1="";OFS="." ; print $0 ; OFS=""}' |			\
	sed 's/^.//'`

# Try read and parse the setup from a JSON file.
if ! type jq >/dev/null 2>&1; then
	echo "jq is required, please install (from EPEL)."
	exit 2
fi
if [ -e $KDC_CONFIG ]; then
	status=$(cat $KDC_CONFIG | jq 'has("ip")')
	if [[ $status == "true" ]]; then
		KDC_NATHOST=$(cat $KDC_CONFIG | 			\
			jq '.ip' | 					\
			sed -e 's/^"//'  -e 's/"$//')
	fi
	status=$(cat $KDC_CONFIG | jq 'has("port")')
	if [[ $status == "true" ]]; then
		KDC_PORT=$(cat $KDC_CONFIG | 				\
			jq '.port' | 					\
			sed -e 's/^"//'  -e 's/"$//')
	fi
	status=$(cat $KDC_CONFIG | jq 'has("domain")')
	if [[ $status == "true" ]]; then
		KDC_DOMAIN_NAME=$(cat $KDC_CONFIG | 			\
			jq '.domain' | 					\
			sed -e 's/^"//'  -e 's/"$//')
	fi
	status=$(cat $KDC_CONFIG | jq 'has("realm")')
	if [[ $status == "true" ]]; then
		KDC_REALM_NAME=$(cat $KDC_CONFIG | 			\
			jq '.realm' | 					\
			sed -e 's/^"//'  -e 's/"$//')
	fi
	status=$(cat $KDC_CONFIG | jq 'has("principals")')
	if [[ $status == "true" ]]; then
		OLD_IFS=$IFS
		IFS=$'\n'
		KDC_PRINCIPALS=($(cat $KDC_CONFIG | 			\
			jq '.principals[] | .id+" "+.password'))
		IFS=$OLD_IFS
	fi
else
	echo "Cannot find config file $KDC_CONFIG"
	exit 2
fi

KDC_DOMAIN_NAME=${KDC_DOMAIN_NAME:-$DEFAULT}
DEFAULT=`echo $KDC_DOMAIN_NAME | awk '{print toupper($0)}'`
# Kerberos realm name.
# Default derived from KDC_DOMAIN_NAME.
KDC_REALM_NAME=${KDC_REALM_NAME:-$DEFAULT}

# If we did not get any principals from our configuration, return error.
if [ ${#KDC_PRINCIPALS[@]} -eq 0 ]; then
	echo "Cannot find any principal in $KDC_CONFIG"
	exit 22
fi


DOCKERIMAGE='ddnstorage/lustre-docker-kdc:latest'
CONTAINER='docker'
GET_KDC_HOST="echo $KDC_NATHOST"


# Start docker container.
# Also render a temporary KDC configuration file and export the keytab files.
function startDocker {
	docker inspect --type=image $DOCKERIMAGE 2>/dev/null 1>&2
	if [ "$?" -ne 0 ]; then
		echo ""
		echo "Docker image $DOCKERIMAGE does not exist. Please make sure to run '$0 build' before."
		echo ""
		exit 2
	fi

	echo "Kerberos KDC container starting..."
	docker run -d -h $KDC_HOST_NAME					\
		-p $KDC_PORT:88	 					\
		-p $KDC_PORT:88/udp 					\
		--name=$KDC_HOST_NAME 					\
		$DOCKERIMAGE > /dev/null

	if [ "$?" -ne 0 ]; then
		echo ""
		echo "Kerberos KDC could not be started."
		echo ""
		exit 3
	fi

	local KDC_HOST=`$GET_KDC_HOST`
	echo ""
	echo "Kerberos KDC now reachable at '$KDC_HOST:$KDC_PORT'"
	echo ""

	if [ -z "$KDC_DOMAIN_NAME" ]; then
		sed "/DOMAIN_NAME/d" "$KDC_TEMPLATES_DIR/krb5.conf" >   \
		krb5.conf
	else
		cp "$KDC_TEMPLATES_DIR/krb5.conf" krb5.conf
	fi
	sed -i -e "s/HOST_NAME/$KDC_HOST:$KDC_PORT/g"			\
		-e "s/DOMAIN_NAME/$KDC_DOMAIN_NAME/g" 			\
		-e "s/REALM_NAME/$KDC_REALM_NAME/g"			\
		krb5.conf

	docker cp $KDC_HOST_NAME:/etc/lustre-docker-kdc/Keytabs . || exit 2

	echo "For using the KDC with Lustre, copy following files on corresponding nodes:"
	echo "    * to /etc/krb5.conf:"
	echo "        - $(pwd)/krb5.conf on all server and clients nodes"
	echo "    * to /etc/krb5.keytab:"
	echo "        - MDS: $(pwd)/Keytabs/krb5.keytab.lustre_mds_<host>@<domain>"
	echo "        - OSS: $(pwd)/Keytabs/krb5.keytab.lustre_oss_<host>@<domain>"
	echo "        - clients: $(pwd)/Keytabs/krb5.keytab.lustre_root_<host>@<domain>"
	echo ""
	echo "Then, as simple as A-B-C, setup Lustre in 3 steps:"
	echo "    * on all Lustre nodes (servers, clients), declare the program to emit authentication requests."
	echo "      This is simply done by creating the file /etc/request-key.d/lgssc.conf with the following content:"
	echo "        create lgssc * * /usr/sbin/lgss_keyring %o %k %t %d %c %u %g %T %P %S"
	echo "    * on server nodes only (MDS, OSS), start the daemon that is responsible for checking authentication"
	echo "      credentials. Directly run in a shell:"
	echo "      # lsvcgssd -vv -k"
	echo "    * on MGS node, activate Kerberos authentication for your file system. From a shell, launch:"
	echo "      # lctl conf_param <fsname>.srpc.flavor.default=krb5n"
	echo ""
}


# Stop docker container and remove the temporary KDC configuration file.
function stopDocker {
	docker stop $KDC_HOST_NAME &> /dev/null
	docker rm $KDC_HOST_NAME &> /dev/null
	rm -f krb5.conf
	rm -rf Keytabs
	echo "Kerberos KDC stopped and removed, and keytab files removed."
	echo "Please make sure to remove potential credential caches /tmp/krb5cc_lustre* on all Lustre nodes."
}


# Render docker container image.
function buildImage {
	local RENDER_PRINCIPAL="RUN kadmin -l add --password=PASSWORD --use-defaults PRINCIPAL"
	local EXPORT_KEYTAB_CMD="RUN kadmin -l ext_keytab -k /etc/lustre-docker-kdc/Keytabs/krb5.keytab"
	local -a EXPORT_KEYTAB_LIST
	local IDX=0

	if ! type docker >/dev/null 2>&1; then
		echo "docker is required, please install."
		exit 2
	fi

	# Use a temporary file for the add principal directives.
	local TEMP_PRINCIPALS="_principals.txt"
	for principal in "${KDC_PRINCIPALS[@]}"
	do
		principal=$(echo $principal | sed -e 's=^"=='  -e 's="$==')
		IFS=' ' read -ra principal <<< "$principal"
		IFS=''

		echo $(echo $RENDER_PRINCIPAL |		 	\
		sed -e "s=PRINCIPAL=${principal[0]}=g"		\
		-e "s=PASSWORD=${principal[1]}=g")		\
		>>$TEMP_PRINCIPALS
		PRINC_TMP=$(echo ${principal[0]} | sed -e 's+/+_+g')
		EXPORT_KEYTAB_LIST[$IDX]="${EXPORT_KEYTAB_CMD}.$PRINC_TMP ${principal[0]}"
		IDX=$((IDX+1))
	done

	local DOCKER_FILE=$(<$KDC_TEMPLATES_DIR/Dockerfile)
	local ADD_PRINCIPALS=$(<$TEMP_PRINCIPALS)

	DOCKER_FILE=$(echo "${DOCKER_FILE//PRINCIPALS/$ADD_PRINCIPALS}")
	DOCKER_FILE=$(echo "${DOCKER_FILE//REALM/$KDC_REALM_NAME}")
	CMD_LIST=$(echo "RUN mkdir /etc/lustre-docker-kdc/Keytabs ${EXPORT_KEYTAB_LIST[@]}" | sed -e 's+ RUN+\nRUN+g')
	DOCKER_FILE=$(echo "${DOCKER_FILE//EXPORT_KEYTAB/$CMD_LIST}")
	echo $DOCKER_FILE > Dockerfile

	rm -f $TEMP_PRINCIPALS

	if [ -z "$KDC_DOMAIN_NAME" ]; then
		sed "/DOMAIN_NAME/d" "$KDC_TEMPLATES_DIR/krb5.conf" >   \
		krb5.conf
	else
		cp "$KDC_TEMPLATES_DIR/krb5.conf" krb5.conf
	fi
	sed -i -e "s=HOST_NAME=$KDC_HOST_NAME=g" 			\
		-e "s=DOMAIN_NAME=$KDC_DOMAIN_NAME=g" 			\
		-e "s=REALM_NAME=$KDC_REALM_NAME=g"			\
		krb5.conf

	docker build -t $DOCKERIMAGE .
	rm -f Dockerfile
	rm -f krb5.conf
}


function testKdcReachable {
	local HOST=$($GET_KDC_HOST)
	if ! type telnet >/dev/null 2>&1; then
		echo "telnet is required, please install."
		exit 2
	fi
	echo -n "at $HOST:$KDC_PORT... "
	echo $'\n' $'\n' $'\n' | 			\
		telnet $HOST $KDC_PORT 2>/dev/null |	\
		grep Connected >/dev/null
	if [[ $? -eq 0 ]]; then
		return 0
	fi
	return 1
}


case "$1" in
	start)
		startDocker
		;;
	stop)
		stopDocker
		;;
	clean)
		docker rmi -f $DOCKERIMAGE
		;;
	build)
		buildImage
		;;
	test)
		echo -n "Trying to connect to KDC... "
		if testKdcReachable; then
			echo "ok"
		else
			echo "failed"
			exit 1
		fi
		;;
	config)
		echo "System"
		echo "    fqdn:      $(hostname -f)"
		echo "KDC"
		KDC_HOST=`$GET_KDC_HOST`
		echo "    host:      $KDC_HOST"
		echo "    port:      $KDC_PORT"
		echo "Kerberos"
		echo "    domain:    $KDC_DOMAIN_NAME"
		echo "    realm:     $KDC_REALM_NAME"
		for principal in "${KDC_PRINCIPALS[@]}"
		do
			principal=$(echo $principal | sed -e 's=^"=='  -e 's="$==')
			OLD_IFS=$IFS
			IFS=' ' read -ra principal <<< "$principal"
			IFS=$OLD_IFS
			echo "    principal: ${principal[0]}, password: ${principal[1]}"
		done

		;;
	*)
		echo "Usage: $0 start|stop|build|clean|config|test"
		;;
esac
